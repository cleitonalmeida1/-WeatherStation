/*
 * WeatherStation.cpp
 *
 *  Created on: 11/03/2016
 *      Author: Cleiton Gon√ßalves
 */

#include <WeatherStation.h>

WeatherStation::WeatherStation() : fs(FILESYSTEM_NAME), logger(FILEPATH_LOG, false), gps(p13, p14) {
	// TODO Auto-generated constructor stub

}

WeatherStation::~WeatherStation() {
	// TODO Auto-generated destructor stub
}

void WeatherStation::destroy() {
	this->~WeatherStation();
}

WeatherStation* WeatherStation::getInstance() {
	static WeatherStation *station = NULL;

	if (station == NULL)
		station = new WeatherStation();

	return station;
}

void WeatherStation::start() {

	long processtime, tm;

	while (true) {

		reloadWatchdog();

		if (isTimeToRead()) {

			processtime = tm = time(NULL);

			logger.log("TIME A: %ld", processtime);

			readSensors();

			if (!saveData())
				logger.err("Unable to save the data.");

			tm = time(NULL);

			logger.log("TIME B: %ld", tm);

			processtime = tm - processtime;

			logger.log("Process time: %ld", processtime);

			//Injetar falhas
		}

		if (isTimeToSend()) {
			if (!send())
				logger.warn("Unable to send the data.");
		}

		if (cfg.getReadingInterval() >= 60)
			Sleep();
		else
			wait(0.5);
	}
}

void WeatherStation::init() {

	/* Load configuration */
	cfg.loadFromFile(FILEPATH_CONFIG);

	/* Save configuration */
	cfg.saveToFile(FILEPATH_CONFIG, "# Weather station without implementing fault tolerance");

	/* Reset by watchdog */
	if ((LPC_WDT->WDMOD >> 2) & 1) {

		logger.log("Reset by watchdog."); /* XXX: The log time may be incorrect */

		/* Blink LED 2 */
		blinkLED(LED2, 10, 100);

	} else {

		logger.log("Reset by power-button."); /* XXX: The log time may be incorrect */

		/* Blink LED 1 */
		blinkLED(LED1, 10, 100);
	}

	config();
}


